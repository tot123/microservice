
version: '3.8'
services:
  mysql8:
    image: mysql:8.0.28
    container_name: mysql8
    restart: unless-stopped       # always
    environment:
      TZ: Asia/Shanghai
      MYSQL_ROOT_PASSWORD: 123456
      LANG: en_US.UTF-8
    ports:
      - "3306:3306"
    command:
      --max_connections=1000
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --default-authentication-plugin=mysql_native_password
      --sql-mode="STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO"
    volumes:
      - "./mysql8/data:/var/lib/mysql"
      - "./mysql8/conf:/etc/mysql"
      - "./mysql8/mysql-files:/var/lib/mysql-files"
      - "./mysql8/init:/docker-entrypoint-initdb.d"
    networks:
      - custom_net
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost" ]
      retries: 10

  nacos:
    image: nacos/nacos-server:v2.2.0
    container_name: nacos_server                                 # 容器名为'nacos_server'
    restart: unless-stopped                                              # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    volumes:                                                     # 数据卷挂载路径设置,将本机目录映射到容器目录
      - "./nacos/logs:/home/nacos/logs"
      - "./nacos/data/:/home/nacos/data"
    environment:                        # 设置环境变量,相当于docker run命令中的-e
      - PREFER_HOST_MODE=hostname                 # 如果支持主机名可以使用hostname,否则使用ip，默认也是ip
      - MODE=standalone                           # 单机模式启动
      - SPRING_DATASOURCE_PLATFORM=mysql          # 数据源平台 仅支持mysql或不保存empty
      # TODO 修改mysql连接信息
      - MYSQL_SERVICE_HOST=mysql8           # 注：这里不能为`127.0.0.1`或`localhost`方式！！！
      - MYSQL_SERVICE_DB_NAME=nacos_config
      - MYSQL_SERVICE_PORT=3306
      - MYSQL_SERVICE_USER=nacos
      - MYSQL_SERVICE_PASSWORD=nacos
      # TODO 修改JVM调优参数
      - JVM_XMS=128m   #-Xms default :2g
      - JVM_XMX=128m   #-Xmx default :2g
      - JVM_XMN=64m    #-Xmn default :1g
      - JVM_MS=32m     #-XX:MetaspaceSize default :128m
      - JVM_MMS=32m    #-XX:MaxMetaspaceSize default :320m
      - MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&connectTimeout=10000&socketTimeout=30000&autoReconnect=true&useSSL=false&serverTimezone=UTC
    ports:
      - "8848:8848"
      - "9848:9848"
      - "9849:9849"
    networks:
      - custom_net
    healthcheck:
      test: ["CMD-SHELL", "echo 'ruok' | curl -s telnet://localhost:8848 || exit 1"]
      retries: 10
    depends_on:
      mysql8:
        condition: service_healthy

  seata:
    image: seataio/seata-server:1.6.1
    container_name: seata-server                                  # 容器名为'seata-server'
    restart: unless-stopped                                       # 指定容器退出后的重启策略为始终重启，但是不考虑在Docker守护进程启动时就已经停止了的容器
    volumes:                                                      # 数据卷挂载路径设置,将本机目录映射到容器目录
      #      - "./seata/logs:/root/logs"
      - "./seata/resources/application.yml:/seata-server/resources/application.yml"
    environment:                        # 设置环境变量,相当于docker run命令中的-e
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
      # 注册到nacos上的ip。客户端将通过该ip访问seata服务。
      # 注意公网ip和内网ip的差异。
      SEATA_IP: 192.168.1.170
      # 指定seata服务启动端口
      SEATA_PORT: 8091
      #      STORE_MODE: file # 指定seata-server的事务日志存储方式, 支持db ,file,redis(Seata-Server 1.3及以上版本支持), 默认是 file
      #      SERVER_NODE: 1 # 指定seata-server节点ID, 如 1,2,3..., 默认为 根据ip生成
      #      SEATA_ENV: dev # 指定 seata-server 运行环境, 如 dev, test 等, 服务启动时会使用 registry-dev.conf 这样的配置
      # 指定配置文件位置, 如 file:/root/registry, 将会加载 /root/registry.conf 作为配置文件，
      # 如果需要同时指定 file.conf文件，需要将registry.conf的config.file.name的值改为类似file:/root/file.conf：
    #      SEATA_CONFIG_NAME: file:/root/seata-config/registry
    ports:                              # 映射端口
      - "7091:7091"
      - "8091:8091"
    depends_on:
      nacos:
        condition: service_healthy
    networks:
      - custom_net

  redis:
    image: redis:6.0.8
    container_name: redis6
    restart: unless-stopped
    #    command: redis-server /etc/redis/redis.conf --requirepass 123456 --appendonly no # 启动redis服务并添加密码为：123456,默认不开启redis-aof方式持久化配置
    command: redis-server /etc/redis/redis.conf --requirepass 123456 --appendonly yes # 启动redis服务并添加密码为：123456,并开启redis持久化配置
    environment:                        # 设置环境变量,相当于docker run命令中的-e
      TZ: Asia/Shanghai
      LANG: en_US.UTF-8
    volumes:                            # 数据卷挂载路径设置,将本机目录映射到容器目录
      - "./redis/data:/data"
      - "./redis/config/redis.conf:/etc/redis/redis.conf"  # `redis.conf`文件内容`http://download.redis.io/redis-stable/redis.conf`
    ports:                              # 映射端口
      - "6379:6379"
    networks:
      - custom_net


networks:
  custom_net:
    external:
      name: app_net

